<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TreeBoyLife</title>
    <link>https://treeboylife.com/</link>
    <description>Recent content on TreeBoyLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Apr 2021 20:09:44 +0800</lastBuildDate><atom:link href="https://treeboylife.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode_easy_twosum</title>
      <link>https://treeboylife.com/blog/leetcode_easy_twosum/</link>
      <pubDate>Sat, 17 Apr 2021 20:09:44 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/leetcode_easy_twosum/</guid>
      <description>Two Sum Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
Solution brute-force class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { for(int i=0; i &amp;lt; nums.size(); ++i) { int left = target - nums[i]; for(int j=i+1; j &amp;lt; nums.size(); j++) { if(nums[j] == left) { return {i, j}; } } } return {}; } }; hashmap class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { unordered_map&amp;lt;int, int&amp;gt; indices; for(int i=0; i &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>Ipopt Build</title>
      <link>https://treeboylife.com/blog/ipopt-build/</link>
      <pubDate>Mon, 08 Mar 2021 19:33:30 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/ipopt-build/</guid>
      <description>What is Ipopt Ipopt (Interior Point Optimizer) is an open source software package for large-scale nonlinear optimization. You can find the official documentation HERE.
How to Buid It The Ipopt relies some dependencies. Make sure install them first.
 LAPACK (Linear Algebra Package) HSL (Harwell Subroutines Library) ThirdParty-HSL  Compile And Install LAPACK First we need to download the source code and compile to dynamic shared library.
wget https//github.com/Reference-LAPACK/lapack/archive/v3.9.0.tar.gz The LAPACK is compiled to static library by default with unmodified rule, we need to change the 45th line of CMakeLists.</description>
    </item>
    
    <item>
      <title>Virtual Functions in Cpp</title>
      <link>https://treeboylife.com/blog/virtual-functions-in-cpp/</link>
      <pubDate>Sun, 28 Feb 2021 10:02:46 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/virtual-functions-in-cpp/</guid>
      <description>What is virtual function? A virtual function is a member function in the base class that we expect to redefine in derived classes.
Basically a virtual function is used in the base class in order to ensure that the function is overriden.
This especially applies to cases where a pointer of base class points to an object of a derived class.
Here is a basic example which demonstrates how virtual function works.</description>
    </item>
    
    <item>
      <title>Migrating Blog to Github Pages</title>
      <link>https://treeboylife.com/blog/migrate-blog-to-github-pages/</link>
      <pubDate>Fri, 29 Jan 2021 22:30:51 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/migrate-blog-to-github-pages/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
