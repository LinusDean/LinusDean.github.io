<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dean&#39;s blog</title>
    <link>https://treeboylife.com/</link>
    <description>Recent content on Dean&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Jul 2021 20:20:45 +0800</lastBuildDate><atom:link href="https://treeboylife.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comments in Rust</title>
      <link>https://treeboylife.com/blog/comments-in-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:20:45 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/comments-in-rust/</guid>
      <description>Rust语言中的注释 任何语言都需要注释，Rust语言提供几个不同的注释方式
 普通的注释  // 一些注释 /* 块注释 */ # 下面是文档的注释，可以被parse到HTML的库文档中 /// 生成库文档 //! </description>
    </item>
    
    <item>
      <title>Hello World Rust</title>
      <link>https://treeboylife.com/blog/hello-world-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:09:54 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/hello-world-rust/</guid>
      <description>Hello World Rust 语言中最简单的一个Hello World程序
fn main() { println!(&amp;#34;Hello Rust!&amp;#34;); } 在Rust中println!是一个宏(Marco)用于输出字符串
rust程序文件后缀为 rs 编译一个rust程序，可以使用 rustc helloworld.rs rustc编译器编译完程序文件后可以生成一个二进制文件</description>
    </item>
    
    <item>
      <title>Stored Procedure Analysis</title>
      <link>https://treeboylife.com/blog/stored-procedure-analysis/</link>
      <pubDate>Fri, 16 Jul 2021 20:36:00 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/stored-procedure-analysis/</guid>
      <description>记录一次存储过程耗时分析 公司某个项目的web数据库一些表经过了一些调整导致了一个主要核心业务的存储过程变得非常之慢，于是想要从存储过程中
在一些关键性的地方打印出一些调试信息和时间信息，因为我们使用了RDS，所以没有办法将日志重定向到某个文件，因此
我搜索了一下互联网，最终从stackoverflow中找到了一些思路，由于忘记保存书签了，没办法发到记录到这片博文中。
主要思路 调试语句的主要思路就是创建一个零时的表例如debugMsg
DROP TABLE IF EXISTS `debugMsg`; CREATE TABLE `debugMsg` ( `msg` varchar(255) DEFAULT NULL, `datetime` int(8) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; 在我们执行特定语句的前后分别加入调试语句，将记录插入到debugMsg表中，已达到获取该段SQL执行时间的粗略时间,并且在存储过程最前加入一个标记位，方便开启关闭调试
set @debug_enable=FALSE; IF @debug_enable THEN delete from debugMsg; END IF; ... IF @debug_enable THEN INSERT INTO debugMsg(msg, datetime) VALUES (&amp;#34;create case xxxxx....&amp;#34;, UNIX_TIMESTAMP()); END IF; 业务代码部分 IF @debug_enable THEN INSERT INTO debugMsg(msg, datetime) VALUES (&amp;#34;END create case xxxxx....&amp;#34;, UNIX_TIMESTAMP()); END IF; </description>
    </item>
    
    <item>
      <title>Leetcode_easy_twosum</title>
      <link>https://treeboylife.com/blog/leetcode_easy_twosum/</link>
      <pubDate>Sat, 17 Apr 2021 20:09:44 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/leetcode_easy_twosum/</guid>
      <description>Two Sum Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
Solution brute-force class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { for(int i=0; i &amp;lt; nums.size(); ++i) { int left = target - nums[i]; for(int j=i+1; j &amp;lt; nums.size(); j++) { if(nums[j] == left) { return {i, j}; } } } return {}; } }; hashmap class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { unordered_map&amp;lt;int, int&amp;gt; indices; for(int i=0; i &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>Ipopt Build</title>
      <link>https://treeboylife.com/blog/ipopt-build/</link>
      <pubDate>Mon, 08 Mar 2021 19:33:30 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/ipopt-build/</guid>
      <description>What is Ipopt Ipopt (Interior Point Optimizer) is an open source software package for large-scale nonlinear optimization. You can find the official documentation HERE.
How to Buid It The Ipopt relies some dependencies. Make sure install them first.
 LAPACK (Linear Algebra Package) HSL (Harwell Subroutines Library) ThirdParty-HSL  Compile And Install LAPACK First we need to download the source code and compile to dynamic shared library.
wget https//github.com/Reference-LAPACK/lapack/archive/v3.9.0.tar.gz The LAPACK is compiled to static library by default with unmodified rule, we need to change the 45th line of CMakeLists.</description>
    </item>
    
    <item>
      <title>Virtual Functions in Cpp</title>
      <link>https://treeboylife.com/blog/virtual-functions-in-cpp/</link>
      <pubDate>Sun, 28 Feb 2021 10:02:46 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/virtual-functions-in-cpp/</guid>
      <description>What is virtual function? A virtual function is a member function in the base class that we expect to redefine in derived classes.
Basically a virtual function is used in the base class in order to ensure that the function is overriden.
This especially applies to cases where a pointer of base class points to an object of a derived class.
Here is a basic example which demonstrates how virtual function works.</description>
    </item>
    
    <item>
      <title>Migrating Blog to Github Pages</title>
      <link>https://treeboylife.com/blog/migrate-blog-to-github-pages/</link>
      <pubDate>Fri, 29 Jan 2021 22:30:51 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/migrate-blog-to-github-pages/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
