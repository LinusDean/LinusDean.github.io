<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Dean&#39;s Blog</title>
    <link>https://treeboylife.com/blog/</link>
    <description>Recent content in Blogs on Dean&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jul 2022 16:11:32 +0800</lastBuildDate><atom:link href="https://treeboylife.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PIMPL More Stable APIs</title>
      <link>https://treeboylife.com/blog/pimpl-more-stable-apis/</link>
      <pubDate>Sat, 09 Jul 2022 16:11:32 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/pimpl-more-stable-apis/</guid>
      <description> Pimpl a.k.a (Pointer to implentation) 是一种现代C++技术，用于隐藏实现，尽量减少耦合，并分离接口。
 为什么使用pimpl？ 在软件开发中，使用Pimpl有一下三点好处
 最小化编译依赖 实现接口和实现的分离 可移植性  Pimpl头文件 #ifndef IMPL_PERSON_H #define IMPL_PERSON_H #include &amp;lt;string&amp;gt;#include &amp;lt;memory&amp;gt; class Person { public: Person(std::string name); ~Person(); std::string GetAttributes(); private: struct pImplPerson; std::unique_ptr&amp;lt;pImplPerson&amp;gt; m_impl; }; #endif // IMPL_PERSON_H Pimpl实现 #include &amp;#34;person.h&amp;#34;#include &amp;lt;iostream&amp;gt; struct Person::pImplPerson { std::string m_name; std::string m_strength; std::string m_speed; }; Person::Person(std::string name) { m_impl = std::make_unique&amp;lt;pImplPerson&amp;gt;(); m_impl-&amp;gt;m_name = name; m_impl-&amp;gt;m_speed = &amp;#34;n/a&amp;#34;; m_impl-&amp;gt;m_strength = &amp;#34;n/a&amp;#34;; } Person::~Person() {} std::string Person::GetAttributes() { std::string retStr = &amp;#34;name: &amp;#34; + m_impl-&amp;gt;m_name + &amp;#34; speed: &amp;#34; + m_impl-&amp;gt;m_speed + &amp;#34; strength: &amp;#34; + m_impl-&amp;gt;m_strength; return retStr; } 参考链接  why-should-the-pimpl-idiom-be-used Pimpl For Compile-Time Encapsulation (Modern C++)  </description>
    </item>
    
    <item>
      <title>Onwership in Rust</title>
      <link>https://treeboylife.com/blog/onwership-in-rust/</link>
      <pubDate>Fri, 26 Nov 2021 15:00:51 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/onwership-in-rust/</guid>
      <description>什么是所有权？ Rust的核心特性就是所有权。
所有程序在运行时都必须管理他们使用计算机内存的方式。通常的语言存在以下两种情况。
 带有垃圾回收机制例如Java、C#，在程序运行时，垃圾回收器会不断地寻找不再使用的内存。 程序员显示地分配和释放内存，例如C/C++语言。  Rust语言采取了第三种方式，内存通过一个所有权系统来管理，其中包含一组编译器在编译时检查的规则。当程序运行时，所有权特性不会减慢程序的运行速度（因为Rust把内存管理相关的工作提前到编译时）。
Stack (栈内存) vs Heap (堆内存) 在像Rust这样的系统级编程语言里，一个值在stack上还是heap上对语言的行为和你为什么要做某些决定时存在更大影响的。
存储数据  Stack （后进先出 LIFO Last in first out）  栈上添加数据为压入栈 栈上移除数据为弹出栈   所有存储在Stack上的数据必须拥有已知的固定的大小  编译时大小未知的数据或者运行时可能发生变化的数据必须存放在heap上   Heap对于内存的组织性差一些  当把数据放入到heap时，会请求一定数量的空间 操作系统在heap里找到一块足够大的空间，把它标记为在用，并返回一个指针，也就是这个空间的地址 这个过程就叫做在heap上分配    把值push到stack上不叫分配，因为指针ptr是已知固定大小的，可以把指针存放在stack上。如果你想访问实际的数据，你必须使用指针来定位
 The size of a pointer is not fixed. It depends upon different issues like operating system, CPU architecture etc. Usually it depends upon the word size of underlying processor for example a 32 bit computer the pointer size can be 4 bytes.</description>
    </item>
    
    <item>
      <title>About Tmux and Vim</title>
      <link>https://treeboylife.com/blog/about-tmux-and-vim/</link>
      <pubDate>Sun, 15 Aug 2021 19:54:37 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/about-tmux-and-vim/</guid>
      <description>记录以下最近使用Tmux的一些设置和Vim的一些小技巧 tmux tmux是类UNIX操作系统里面一款终端工具，常用来作为终端分屏或者挂起后台进程等
创建一个Session 我们可以使用tmux new session -s mysessionName 来创建一个Session，我在我的环境变量里将其设置了一个aliasalias tnew=&amp;quot;tmux new session -s&amp;quot;,这样子就可以直接使用tnew mysession直接创建一个新的session，不用敲那么多命令
挂起当前Session 挂起当前的这个session可以使用组合键Ctrl+b D(默认Control键加b然后按大写d)
创建一个分屏  使用组合键Ctrl+b &amp;quot;用来创建一个Horizontal的pane 使用组合键Ctrl+b %用来创建一个Vertical的pane  使用hjkl在不同的pane之间来回切换 这边我们需要修改以下tmux的配置文件 ~/.tmux.conf,这样子我们可以使用组合键Ctrl+b hjkl来回切换
bind h select-pane -L bind j select-pane -D bind k select-pane -U bind l select-pane -R 使用hjkl对pane进行resize 在tmux的配置文件中加入以下配置
# 绑定Ctrl+hjkl键为面板上下左右调整边缘的快捷指令 # 注意我们还是需要先按下Tmux的命令键 Ctrl+b bind -r ^k resizep -U 10 # 绑定Ctrl+k为往↑调整面板边缘10个单元格 bind -r ^j resizep -D 10 # 绑定Ctrl+j为往↓调整面板边缘10个单元格 bind -r ^h resizep -L 10 # 绑定Ctrl+h为往←调整面板边缘10个单元格 bind -r ^l resizep -R 10 # 绑定Ctrl+l为往→调整面板边缘10个单元格 Vim中的宏 昨天在处理一些文本需要一些批量化的工作去做，例如我需要将以下的文本删除最前的时间字符，后面的字符是特定格式的，于是我就想着要不要用vim的宏去处理一下</description>
    </item>
    
    <item>
      <title>Use Systemd in Docker Container</title>
      <link>https://treeboylife.com/blog/use-systemd-in-docker-container/</link>
      <pubDate>Tue, 03 Aug 2021 14:52:27 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/use-systemd-in-docker-container/</guid>
      <description>Use systemd in docker container 公司的代码比较老旧加上使用的gcc版本也比较低，我放弃了在macOS上直接开发，之前在自己搭建的CentOS7虚拟机下面搭建了一个开发环境，其实环境还是很OK的，但是虚拟机有个缺点就是没有那么方便迁移，且比较笨重，于是我想着能不能将开发环境容器化，于是遇到systemd在docker下面的问题，便记录下来。
Solution 通过不断的Google，我终于成功的在CentOS7的container下面用起了systemd和ccls, 首先我们需要一个下面的Dockerfile
FROMcentos:7ENV container dockerRUN yum -y install systemd; yum clean all;RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in ; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done);RUN rm -rf /lib/systemd/system/multi-user.target.wants/;RUN rm -rf /etc/systemd/system/.wants/;RUN rm -rf /lib/systemd/system/local-fs.target.wants/;RUN rm -rf /lib/systemd/system/sockets.target.wants/udev;RUN rm -rf /lib/systemd/system/sockets.target.wants/initctl;RUN rm -rf /lib/systemd/system/basic.target.wants/;RUN rm -rf /lib/systemd/system/anaconda.target.wants/*;VOLUME [ &amp;#34;/sys/fs/cgroup&amp;#34; ] RUN yum -y install gccRUN yum -y install epel-releaseRUN yum -y install snapdCMD [&amp;#34;/usr/sbin/init&amp;#34;]在Docker目录的同级目录下面执行docker build -t dev .</description>
    </item>
    
    <item>
      <title>Iptables Port Forwarding Settings</title>
      <link>https://treeboylife.com/blog/iptables-port-forwarding-settings/</link>
      <pubDate>Mon, 02 Aug 2021 12:35:18 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/iptables-port-forwarding-settings/</guid>
      <description>Linux iptables转发 最近在使用Apsara专有云，但是其安全组策略有一些限制，原本我们需要使用A机器访问C机器，可惜目前A机器因为安全组策略的原因无法正常访问，但凑巧的是目前有一台中转节点B，A可以访问B，B也可以访问C
于是我想起了之前Linux用iptables做端口转发的，这边简单记录一下
示意图 目前简单的网络架构是这样子的
我们首先需要在服务器B上面开启端口转发功能，需要给sysctl.conf写入端口转发配置
net.ipv4.ip_forward=1 执行sysctl -p使其生效，最后配置iptables
iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 1.1.1.1:8080 iptables -t nat -A POSTROUTING -p tcp -d 1.1.1.1 --dport 8080 -j SNAT --to-source 192.168.2.1 这样子我们就可以服务器A访问服务器B的8080端口实现访问服务器C的8080端口效果</description>
    </item>
    
    <item>
      <title>Comments in Rust</title>
      <link>https://treeboylife.com/blog/comments-in-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:20:45 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/comments-in-rust/</guid>
      <description>Rust语言中的注释 任何语言都需要注释，Rust语言提供几个不同的注释方式
 普通的注释  // 一些注释 /* 块注释 */ # 下面是文档的注释，可以被parse到HTML的库文档中 /// 生成库文档 //! </description>
    </item>
    
    <item>
      <title>Hello World Rust</title>
      <link>https://treeboylife.com/blog/hello-world-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:09:54 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/hello-world-rust/</guid>
      <description>Hello World Rust 语言中最简单的一个Hello World程序
fn main(){println!(&amp;#34;Hello Rust!&amp;#34;);}在Rust中println!是一个宏(Marco)用于输出字符串
rust程序文件后缀为 rs 编译一个rust程序，可以使用 rustc helloworld.rs rustc编译器编译完程序文件后可以生成一个二进制文件</description>
    </item>
    
    <item>
      <title>Stored Procedure Analysis</title>
      <link>https://treeboylife.com/blog/stored-procedure-analysis/</link>
      <pubDate>Fri, 16 Jul 2021 20:36:00 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/stored-procedure-analysis/</guid>
      <description>记录一次存储过程耗时分析 公司某个项目的web数据库一些表经过了一些调整导致了一个主要核心业务的存储过程变得非常之慢，于是想要从存储过程中
在一些关键性的地方打印出一些调试信息和时间信息，因为我们使用了RDS，所以没有办法将日志重定向到某个文件，因此
我搜索了一下互联网，最终从stackoverflow中找到了一些思路，由于忘记保存书签了，没办法发到记录到这片博文中。
主要思路 调试语句的主要思路就是创建一个零时的表例如debugMsg
DROPTABLEIFEXISTS`debugMsg`;CREATETABLE`debugMsg`(`msg`varchar(255)DEFAULTNULL,`datetime`int(8)DEFAULTNULL)ENGINE=InnoDBDEFAULTCHARSET=utf8;在我们执行特定语句的前后分别加入调试语句，将记录插入到debugMsg表中，已达到获取该段SQL执行时间的粗略时间,并且在存储过程最前加入一个标记位，方便开启关闭调试
set@debug_enable=FALSE;IF@debug_enableTHENdeletefromdebugMsg;ENDIF;...IF@debug_enableTHENINSERTINTOdebugMsg(msg,datetime)VALUES(&amp;#34;create case xxxxx....&amp;#34;,UNIX_TIMESTAMP());ENDIF;业务代码部分IF@debug_enableTHENINSERTINTOdebugMsg(msg,datetime)VALUES(&amp;#34;END create case xxxxx.</description>
    </item>
    
    <item>
      <title>Leetcode_easy_twosum</title>
      <link>https://treeboylife.com/blog/leetcode_easy_twosum/</link>
      <pubDate>Sat, 17 Apr 2021 20:09:44 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/leetcode_easy_twosum/</guid>
      <description>Two Sum Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
Solution brute-force class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { for(int i=0; i &amp;lt; nums.size(); ++i) { int left = target - nums[i]; for(int j=i+1; j &amp;lt; nums.size(); j++) { if(nums[j] == left) { return {i, j}; } } } return {}; } }; hashmap class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { unordered_map&amp;lt;int, int&amp;gt; indices; for(int i=0; i &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>Ipopt Build</title>
      <link>https://treeboylife.com/blog/ipopt-build/</link>
      <pubDate>Mon, 08 Mar 2021 19:33:30 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/ipopt-build/</guid>
      <description>What is Ipopt Ipopt (Interior Point Optimizer) is an open source software package for large-scale nonlinear optimization. You can find the official documentation HERE.
How to Buid It The Ipopt relies some dependencies. Make sure install them first.
 LAPACK (Linear Algebra Package) HSL (Harwell Subroutines Library) ThirdParty-HSL  Compile And Install LAPACK First we need to download the source code and compile to dynamic shared library.
wget https//github.com/Reference-LAPACK/lapack/archive/v3.9.0.tar.gz The LAPACK is compiled to static library by default with unmodified rule, we need to change the 45th line of CMakeLists.</description>
    </item>
    
    <item>
      <title>Virtual Functions in Cpp</title>
      <link>https://treeboylife.com/blog/virtual-functions-in-cpp/</link>
      <pubDate>Sun, 28 Feb 2021 10:02:46 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/virtual-functions-in-cpp/</guid>
      <description>What is virtual function? A virtual function is a member function in the base class that we expect to redefine in derived classes.
Basically a virtual function is used in the base class in order to ensure that the function is overriden.
This especially applies to cases where a pointer of base class points to an object of a derived class.
Here is a basic example which demonstrates how virtual function works.</description>
    </item>
    
    <item>
      <title>Migrating Blog to Github Pages</title>
      <link>https://treeboylife.com/blog/migrate-blog-to-github-pages/</link>
      <pubDate>Fri, 29 Jan 2021 22:30:51 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/migrate-blog-to-github-pages/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
