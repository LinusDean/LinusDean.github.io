<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Lofi Cafe</title>
    <link>https://loficafe.github.io/categories/linux/</link>
    <description>Recent content in Linux on Lofi Cafe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2022 loficafe</copyright>
    <lastBuildDate>Tue, 03 Aug 2021 14:52:27 +0800</lastBuildDate><atom:link href="https://loficafe.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use Systemd in Docker Container</title>
      <link>https://loficafe.github.io/blog/use-systemd-in-docker-container/</link>
      <pubDate>Tue, 03 Aug 2021 14:52:27 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/use-systemd-in-docker-container/</guid>
      <description>Use systemd in docker container 公司的代码比较老旧加上使用的gcc版本也比较低，我放弃了在macOS上直接开发，之前在自己搭建的CentOS7虚拟机下面搭建了一个开发环境，其实环境还是很OK的，但是虚拟机有个缺点就是没有那么方便迁移，且比较笨重，于是我想着能不能将开发环境容器化，于是遇到systemd在docker下面的问题，便记录下来。
Solution 通过不断的Google，我终于成功的在CentOS7的container下面用起了systemd和ccls, 首先我们需要一个下面的Dockerfile
FROMcentos:7ENV container dockerRUN yum -y install systemd; yum clean all;RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in ; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done);RUN rm -rf /lib/systemd/system/multi-user.target.wants/;RUN rm -rf /etc/systemd/system/.wants/;RUN rm -rf /lib/systemd/system/local-fs.target.wants/;RUN rm -rf /lib/systemd/system/sockets.target.wants/udev;RUN rm -rf /lib/systemd/system/sockets.target.wants/initctl;RUN rm -rf /lib/systemd/system/basic.target.wants/;RUN rm -rf /lib/systemd/system/anaconda.target.wants/*;VOLUME [ &amp;#34;/sys/fs/cgroup&amp;#34; ] RUN yum -y install gccRUN yum -y install epel-releaseRUN yum -y install snapdCMD [&amp;#34;/usr/sbin/init&amp;#34;]在Docker目录的同级目录下面执行docker build -t dev .</description>
    </item>
    
    <item>
      <title>Iptables Port Forwarding Settings</title>
      <link>https://loficafe.github.io/blog/iptables-port-forwarding-settings/</link>
      <pubDate>Mon, 02 Aug 2021 12:35:18 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/iptables-port-forwarding-settings/</guid>
      <description>Linux iptables转发 最近在使用Apsara专有云，但是其安全组策略有一些限制，原本我们需要使用A机器访问C机器，可惜目前A机器因为安全组策略的原因无法正常访问，但凑巧的是目前有一台中转节点B，A可以访问B，B也可以访问C
于是我想起了之前Linux用iptables做端口转发的，这边简单记录一下
示意图 目前简单的网络架构是这样子的
我们首先需要在服务器B上面开启端口转发功能，需要给sysctl.conf写入端口转发配置
net.ipv4.ip_forward=1 执行sysctl -p使其生效，最后配置iptables
iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 1.1.1.1:8080 iptables -t nat -A POSTROUTING -p tcp -d 1.1.1.1 --dport 8080 -j SNAT --to-source 192.168.2.1 这样子我们就可以服务器A访问服务器B的8080端口实现访问服务器C的8080端口效果</description>
    </item>
    
  </channel>
</rss>
