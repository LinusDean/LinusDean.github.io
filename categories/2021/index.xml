<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021 on Lofi Cafe</title>
    <link>https://loficafe.github.io/categories/2021/</link>
    <description>Recent content in 2021 on Lofi Cafe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2022 loficafe</copyright>
    <lastBuildDate>Mon, 12 Sep 2022 15:43:34 +0800</lastBuildDate><atom:link href="https://loficafe.github.io/categories/2021/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>struct and impl in Rust</title>
      <link>https://loficafe.github.io/blog/struct-impl-in-rust/</link>
      <pubDate>Mon, 12 Sep 2022 15:43:34 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/struct-impl-in-rust/</guid>
      <description>结构体 在Rust语言中，我们可以使用和C/C++一样的关键字struct去声明一个结构体
结构体声明 假设我们需要声明一个方形解构，可以在Rust中使用以下声明
struct Rectangle { width: u32, height: u32, } 初始化一个实例 // 不可变实例 let rect1 = Rectangle { width: 30, height: 60, }; // 可变 let mut rect2 = Rectangle { width: 30, height: 60, }; 访问结构体成员 println!(&amp;#34;height: {}, width: {}&amp;#34;, rect1.width, rect1.height); 直接打印结构体 我们不能直接使用**println!**这个宏去打印结构体。需要对结构体进行修改，添加注解，如下
#[derive(Debug)] struct Rectangle { width: u32, height: u32, } println!(&amp;#34;rect1: {:#?}&amp;#34;, rect1); 方法 方法与函数十分类似：它们都使用fn关键字以及一个名称来声明；它们都可以拥有参数和返回值；另外，它们都包含了一段在调用时执行的代码。方法总是被定义在某个结构体（或者枚举类型、trait对象）并且它们的第一个参数永远都是self，用于指代调用该方法的结构体实例
impl Rectangle { fn area(&amp;amp;self) -&amp;gt; u32 { self.width * self.</description>
    </item>
    
    <item>
      <title>Onwership in Rust</title>
      <link>https://loficafe.github.io/blog/onwership-in-rust/</link>
      <pubDate>Fri, 26 Nov 2021 15:00:51 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/onwership-in-rust/</guid>
      <description>什么是所有权？ Rust的核心特性就是所有权。
所有程序在运行时都必须管理他们使用计算机内存的方式。通常的语言存在以下两种情况。
 带有垃圾回收机制例如Java、C#，在程序运行时，垃圾回收器会不断地寻找不再使用的内存。 程序员显示地分配和释放内存，例如C/C++语言。  Rust语言采取了第三种方式，内存通过一个所有权系统来管理，其中包含一组编译器在编译时检查的规则。当程序运行时，所有权特性不会减慢程序的运行速度（因为Rust把内存管理相关的工作提前到编译时）。
Stack (栈内存) vs Heap (堆内存) 在像Rust这样的系统级编程语言里，一个值在stack上还是heap上对语言的行为和你为什么要做某些决定时存在更大影响的。
存储数据  Stack （后进先出 LIFO Last in first out）  栈上添加数据为压入栈 栈上移除数据为弹出栈   所有存储在Stack上的数据必须拥有已知的固定的大小  编译时大小未知的数据或者运行时可能发生变化的数据必须存放在heap上   Heap对于内存的组织性差一些  当把数据放入到heap时，会请求一定数量的空间 操作系统在heap里找到一块足够大的空间，把它标记为在用，并返回一个指针，也就是这个空间的地址 这个过程就叫做在heap上分配    把值push到stack上不叫分配，因为指针ptr是已知固定大小的，可以把指针存放在stack上。如果你想访问实际的数据，你必须使用指针来定位
 The size of a pointer is not fixed. It depends upon different issues like operating system, CPU architecture etc. Usually it depends upon the word size of underlying processor for example a 32 bit computer the pointer size can be 4 bytes.</description>
    </item>
    
    <item>
      <title>About Tmux and Vim</title>
      <link>https://loficafe.github.io/blog/about-tmux-and-vim/</link>
      <pubDate>Sun, 15 Aug 2021 19:54:37 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/about-tmux-and-vim/</guid>
      <description>记录以下最近使用Tmux的一些设置和Vim的一些小技巧 tmux tmux是类UNIX操作系统里面一款终端工具，常用来作为终端分屏或者挂起后台进程等
创建一个Session 我们可以使用tmux new session -s mysessionName 来创建一个Session，我在我的环境变量里将其设置了一个aliasalias tnew=&amp;quot;tmux new session -s&amp;quot;,这样子就可以直接使用tnew mysession直接创建一个新的session，不用敲那么多命令
挂起当前Session 挂起当前的这个session可以使用组合键Ctrl+b D(默认Control键加b然后按大写d)
创建一个分屏  使用组合键Ctrl+b &amp;quot;用来创建一个Horizontal的pane 使用组合键Ctrl+b %用来创建一个Vertical的pane  使用hjkl在不同的pane之间来回切换 这边我们需要修改以下tmux的配置文件 ~/.tmux.conf,这样子我们可以使用组合键Ctrl+b hjkl来回切换
bind h select-pane -L bind j select-pane -D bind k select-pane -U bind l select-pane -R 使用hjkl对pane进行resize 在tmux的配置文件中加入以下配置
# 绑定Ctrl+hjkl键为面板上下左右调整边缘的快捷指令 # 注意我们还是需要先按下Tmux的命令键 Ctrl+b bind -r ^k resizep -U 10 # 绑定Ctrl+k为往↑调整面板边缘10个单元格 bind -r ^j resizep -D 10 # 绑定Ctrl+j为往↓调整面板边缘10个单元格 bind -r ^h resizep -L 10 # 绑定Ctrl+h为往←调整面板边缘10个单元格 bind -r ^l resizep -R 10 # 绑定Ctrl+l为往→调整面板边缘10个单元格 Vim中的宏 昨天在处理一些文本需要一些批量化的工作去做，例如我需要将以下的文本删除最前的时间字符，后面的字符是特定格式的，于是我就想着要不要用vim的宏去处理一下</description>
    </item>
    
    <item>
      <title>Comments in Rust</title>
      <link>https://loficafe.github.io/blog/comments-in-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:20:45 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/comments-in-rust/</guid>
      <description>Rust语言中的注释 任何语言都需要注释，Rust语言提供几个不同的注释方式
 普通的注释  // 一些注释 /* 块注释 */ # 下面是文档的注释，可以被parse到HTML的库文档中 /// 生成库文档 //! </description>
    </item>
    
    <item>
      <title>Hello World Rust</title>
      <link>https://loficafe.github.io/blog/hello-world-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:09:54 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/hello-world-rust/</guid>
      <description>Hello World Rust 语言中最简单的一个Hello World程序
fn main() { println!(&amp;#34;Hello Rust!&amp;#34;); } 在Rust中println!是一个宏(Marco)用于输出字符串
rust程序文件后缀为 rs 编译一个rust程序，可以使用 rustc helloworld.rs rustc编译器编译完程序文件后可以生成一个二进制文件</description>
    </item>
    
    <item>
      <title>Stored Procedure Analysis</title>
      <link>https://loficafe.github.io/blog/stored-procedure-analysis/</link>
      <pubDate>Fri, 16 Jul 2021 20:36:00 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/stored-procedure-analysis/</guid>
      <description>记录一次存储过程耗时分析 公司某个项目的web数据库一些表经过了一些调整导致了一个主要核心业务的存储过程变得非常之慢，于是想要从存储过程中
在一些关键性的地方打印出一些调试信息和时间信息，因为我们使用了RDS，所以没有办法将日志重定向到某个文件，因此
我搜索了一下互联网，最终从stackoverflow中找到了一些思路，由于忘记保存书签了，没办法发到记录到这片博文中。
主要思路 调试语句的主要思路就是创建一个零时的表例如debugMsg
DROP TABLE IF EXISTS `debugMsg`; CREATE TABLE `debugMsg` ( `msg` varchar(255) DEFAULT NULL, `datetime` int(8) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; 在我们执行特定语句的前后分别加入调试语句，将记录插入到debugMsg表中，已达到获取该段SQL执行时间的粗略时间,并且在存储过程最前加入一个标记位，方便开启关闭调试
set @debug_enable=FALSE; IF @debug_enable THEN delete from debugMsg; END IF; ... IF @debug_enable THEN INSERT INTO debugMsg(msg, datetime) VALUES (&amp;#34;create case xxxxx....&amp;#34;, UNIX_TIMESTAMP()); END IF; 业务代码部分 IF @debug_enable THEN INSERT INTO debugMsg(msg, datetime) VALUES (&amp;#34;END create case xxxxx....&amp;#34;, UNIX_TIMESTAMP()); END IF; </description>
    </item>
    
    <item>
      <title>Migrating Blog to Github Pages</title>
      <link>https://loficafe.github.io/blog/migrate-blog-to-github-pages/</link>
      <pubDate>Fri, 29 Jan 2021 22:30:51 +0800</pubDate>
      
      <guid>https://loficafe.github.io/blog/migrate-blog-to-github-pages/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
