<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Dean&#39;s Blog</title>
    <link>https://treeboylife.com/tags/rust/</link>
    <description>Recent content in Rust on Dean&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Nov 2021 15:00:51 +0800</lastBuildDate><atom:link href="https://treeboylife.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Onwership in Rust</title>
      <link>https://treeboylife.com/blog/onwership-in-rust/</link>
      <pubDate>Fri, 26 Nov 2021 15:00:51 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/onwership-in-rust/</guid>
      <description>什么是所有权？ Rust的核心特性就是所有权。
所有程序在运行时都必须管理他们使用计算机内存的方式。通常的语言存在以下两种情况。
 带有垃圾回收机制例如Java、C#，在程序运行时，垃圾回收器会不断地寻找不再使用的内存。 程序员显示地分配和释放内存，例如*C/C++*语言。  Rust语言采取了第三种方式，内存通过一个所有权系统来管理，其中包含一组编译器在编译时检查的规则。当程序运行时，所有权特性不会减慢程序的运行速度（因为Rust把内存管理相关的工作提前到编译时）。
Stack (栈内存) vs Heap (堆内存) 在像Rust这样的系统级编程语言里，一个值在stack上还是heap上对语言的行为和你为什么要做某些决定时存在更大影响的。
存储数据  Stack （后进先出 LIFO Last in first out）  栈上添加数据为压入栈 栈上移除数据为弹出栈   所有存储在Stack上的数据必须拥有已知的固定的大小  编译时大小未知的数据或者运行时可能发生变化的数据必须存放在heap上   Heap对于内存的组织性差一些  当把数据放入到heap时，会请求一定数量的空间 操作系统在heap里找到一块足够大的空间，把它标记为在用，并返回一个指针，也就是这个空间的地址 这个过程就叫做在heap上分配    把值push到stack上不叫分配，因为指针ptr是已知固定大小的，可以把指针存放在stack上。如果你想访问实际的数据，你必须使用指针来定位
 The size of a pointer is not fixed. It depends upon different issues like operating system, CPU architecture etc. Usually it depends upon the word size of underlying processor for example a 32 bit computer the pointer size can be 4 bytes.</description>
    </item>
    
    <item>
      <title>Comments in Rust</title>
      <link>https://treeboylife.com/blog/comments-in-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:20:45 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/comments-in-rust/</guid>
      <description>Rust语言中的注释 任何语言都需要注释，Rust语言提供几个不同的注释方式
 普通的注释  // 一些注释 /* 块注释 */ # 下面是文档的注释，可以被parse到HTML的库文档中 /// 生成库文档 //! </description>
    </item>
    
    <item>
      <title>Hello World Rust</title>
      <link>https://treeboylife.com/blog/hello-world-rust/</link>
      <pubDate>Sat, 24 Jul 2021 20:09:54 +0800</pubDate>
      
      <guid>https://treeboylife.com/blog/hello-world-rust/</guid>
      <description>Hello World Rust 语言中最简单的一个Hello World程序
fn main() { println!(&amp;#34;Hello Rust!&amp;#34;); } 在Rust中println!是一个宏(Marco)用于输出字符串
rust程序文件后缀为 rs 编译一个rust程序，可以使用 rustc helloworld.rs rustc编译器编译完程序文件后可以生成一个二进制文件</description>
    </item>
    
  </channel>
</rss>
